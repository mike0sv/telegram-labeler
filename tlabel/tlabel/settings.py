"""
Django settings for tlabel project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


def env(name, default=None, type=None):
    value = os.environ.get(name, default)
    return type(value) if type is not None else value


SECRET_KEY = env('SECRET')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tlabel_backend'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tlabel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tlabel.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DB = env('DB', 'sqlite')
if DB == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
elif DB == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME', 'tlabel'),
            'PASSWORD': env('DB_PASS', 'postgres'),
            'USER': env('DB_USER', 'postgres'),
            'HOST': env('DB_HOST', 'postgres')
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

DEFAULT_USER = env('ADMIN_USER', 'admin')
DEFAULT_USER_PASSWORD = env('PASSWORD', 'admin')

DEFAULT_DATA_DIR = env('DATA_DIR', './datasets')
DEFAULT_GENERATORS = {'images': 'tlabel_backend.generators.LocalImageGenerator'}
DEFAULT_CLASSES = env('DEFAULT_CLASSES', 'true,false')

DEFAULT_POLICIES = env('POLICIES', 'label_once,first')
DEFAULT_FINISHER_POLICY = 'first'

DEFAULT_BOT_TOKEN = env('DEFAULT_BOT_TOKEN', None)
TG_USE_PROXY = env('TG_USE_PROXY', 'True', type=lambda x: x == 'True')
TG_PROXY_ADDRESS = env('TG_PROXY_ADDRESS')
TG_PROXY_USERNAME = env('TG_PROXY_USERNAME')
TG_PROXY_PASSWORD = env('TG_PROXY_PASSWORD')

TG_WEBHOOK_CERT_KEY = os.environ.get('DEALER_BOT_CERT_KEY', 'cert/private.key')
TG_WEBHOOK_CERT_PEM = os.environ.get('DEALER_BOT_CERT_PEM', 'cert/cert.pem')
TG_WEBHOOK = os.environ.get('DEALER_BOT_WEBHOOK') == 'true'
TG_WEBHOOK_PORT = int(os.environ.get('DEALER_BOT_WEBHOOK_PORT', 5555))

CLASS_DELIMITER = ','
